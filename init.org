#+TITLE: Emacs Init
#+AUTHOR: Machiel Kroon
#+STARTUP: show2levels
#+PROPERTY: header-args :results silent

setup for emacs

* Initialize
#+begin_src emacs-lisp :results none
  (mkdir "~/.emacs.d/lisp")
  (mkdir "~/.emacs.d/backups")
  (shell-command "touch ~/.emacs.d/mlkustom.el")
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (package-refresh-contents)
  (package-install 'avy)
  (package-install 'expand-region)
  (package-install 'org-bullets)
  ;; (package-install 'solarized)
  ;; (package-install 'vterm
  ;; (package-install 'julia-mode)
  ;; (package-install 'julia-vterm)
  ;; (package-install 'ess)
#+end_src


* Basics
** Early Init

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
;;  (setq package-enable-at-startup nil)
#+end_src

*** Garbage Collection

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  (setq gc-cons-threshold (* 128 1024 1024))
  (add-hook 'emacs-startup-hook
            (lambda () (setq gc-cons-threshold (* 20 1024 1024))))
#+end_src

*** Bench Marking (OFF)

#+begin_src emacs-lisp
  (defun startup-timer ()
    "Measure startup time"
    (message "Emacs loaded in %f sec with %d gcs" (float-time (time-subtract after-init-time before-init-time)) gcs-done))
  (add-hook 'emacs-startup-hook #'startup-timer)
#+end_src

** Starting the server

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+end_src

#+begin_src emacs-lisp
  (if (and (functionp 'server-running-p) (not (server-running-p)))
      nil (server-start))
#+end_src

** Load Path

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (add-to-list 'load-path "~/.emacs.d/lisp")
;;  (setq load-path (append (delete (expand-file-name "~/.emacs.d/elpa/archives") (delete (expand-file-name "~/.emacs.d/elpa/archives") (directory-files "~/.emacs.d/elpa" t directory-files-no-dot-files-regexp))) load-path))
#+end_src

** Package

As long as it is this small, its faster in init.el
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
#+end_src

** Custom File

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq custom-file "~/.emacs.d/mlkustom.el")
  (load custom-file)
#+end_src


*** Provide package-setup

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/package-setup.el
  (provide 'package-setup)
#+end_src

#+begin_src emacs-lisp
  (require 'package-setup)
#+end_src


* Native UI
** Modes I

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/ui-stuff.el
  (setq inhibit-startup-screen t)
  (setq-default indent-tabs-mode nil)
  (column-number-mode 1)
  (setf yes-or-no-p 'y-or-n-p)
  (column-number-mode 1)
  (save-place-mode 1)
#+end_src

** Modes II
less-compatible modes
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/ui-stuff.el
  (tool-bar-mode 1)
  (scroll-bar-mode -1)
  (fido-vertical-mode 1)                  ; 28+
  (setq apropos-do-all t)
  (fringe-mode '(4 . 0))
#+end_src

** Fonts

One font is hard to implement across OS's

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/ui-stuff.el
  (set-face-attribute 'default nil :height 130)
  (set-face-attribute 'fixed-pitch nil :family (face-attribute 'default :family))
;;(set-face-attribute 'variable-pitch nil :family (face-attribute 'default :family))
#+end_src

** Startup screen

Possibly make personal startup screen
#+begin_src emacs-lisp :results true
  (print fancy-startup-text)
  ;;  (fancy-startup-screen)
#+end_src

** Backups
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/ui-stuff.el
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups/")))
#+end_src

** Provide ui-stuff

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/ui-stuff.el
  (provide 'ui-stuff)
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (require 'ui-stuff)
#+end_src


* Extra UI

** Hippie Expand

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/ui-stuff.el
  (global-set-key (kbd "M-/") #'hippie-expand)
  (setq hippie-expand-try-functions-list '(try-complete-file-name
                                           try-expand-line
                                           try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers
                                           try-expand-dabbrev-from-kill))
#+end_src

** Avy

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/extra-ui.el
  (require 'avy)
#+end_src

*** mistyping

#+begin_src emacs-lisp 
  (global-set-key (kbd "C-;") #'avy-goto-char-timer)
  (setq avy-timeout-seconds 0.25)
#+end_src

** Expand-Region

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/extra-ui.el
  (require 'expand-region)
#+end_src

** Toggle-Letter-Case

#+begin_src emacs-lisp
(defun xah-toggle-letter-case ()
  "Toggle the letter case of current word or selection.
Always cycle in this order: Init Caps, ALL CAPS, all lower.

URL `http://xahlee.info/emacs/emacs/modernization_upcase-word.html'
Version: 2020-06-26"
  (interactive)
  (let ( (deactivate-mark nil) $p1 $p2)
    (if (region-active-p)
        (setq $p1 (region-beginning) $p2 (region-end))
      (save-excursion
        (skip-chars-backward "[:alpha:]")
        (setq $p1 (point))
        (skip-chars-forward "[:alpha:]")
        (setq $p2 (point))))
    (when (not (eq last-command this-command))
      (put this-command 'state 0))
    (cond
     ((equal 0 (get this-command 'state))
      (upcase-initials-region $p1 $p2)
      (put this-command 'state 1))
     ((equal 1 (get this-command 'state))
      (upcase-region $p1 $p2)
      (put this-command 'state 2))
     ((equal 2 (get this-command 'state))
      (downcase-region $p1 $p2)
      (put this-command 'state 0)))))
#+end_src

** Open-Settings

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/extra-ui.el
  (defun open-settings ()
	(interactive)
	(find-file-other-window "~/emacs/init.org"))
#+end_src

** Theme
*** Solarized
#+begin_src emacs-lisp
  (load-theme 'solarized-dark t t)
#+end_src

*** Modus Themes

see the manual : https://protesilaos.com/emacs/modus-themes
emacs 28+
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/extra-ui.el
  (setq modus-themes-org-blocks 'gray-background)
  (load-theme 'modus-operandi)
  (define-key global-map (kbd "<f5>") #'modus-themes-toggle)
#+end_src

** Dired-X

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/extra-ui.el
  (with-eval-after-load 'dired
    (setq dired-x-hands-off-my-keys nil)
    (require 'dired-x)
    (setq dired-omit-files
          (concat dired-omit-files "\\|^\\..+$\\|^ntuser.+$\\|^NTUSER.+$"))
    )
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-omit-mode 1)
              ))
#+end_src

** Bindings

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/extra-ui.el
  ;;(global-set-key (kbd "M-c") #'xah-toggle-letter-case) ; frees M-l and M-u 
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-M-,") 'open-settings)
  (global-set-key (kbd "M-'") #'avy-goto-char-2)
  (global-set-key (kbd "M-+") 'er/expand-region)
#+end_src

** Provide
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/extra-ui.el
  (provide 'extra-ui)
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (require 'extra-ui)
#+end_src



* Org Mode
#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/org-setup.el
  (with-eval-after-load 'org
#+end_src

** Settings

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/org-setup.el
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
	 (python . t)
	 (R . t)))
#+end_src

** Org-Bullets

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/org-setup.el
  (require 'org-bullets)
  (setq org-bullets-bullet-list '("◉" "○"))
  (add-hook 'org-mode-hook #'org-bullets-mode)
#+end_src

** Org-Tempo

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/org-setup.el
  (require 'org-tempo)
#+end_src

** Keys

#+begin_src emacs-lisp
  (add-hook 'org-mode #'(local-unset-key (kbd "C-'")))
#+end_src

** Provide

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/org-setup.el
  )
  (provide 'org-setup)
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (require 'org-setup)
#+end_src


* Programming Languages

** C/C++ Mode

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/cedit.el
  (defun mlk-c-edit ()
      "m.l. kroon's C/C++ setup for emacs"
      (progn
        (c-set-style "stroustrup")
        ;;(setq c-basic-offset 4)
        (indent-tabs-mode -1)
        (local-set-key (kbd "C-c C-c") 'compile)
        (unless (or (file-exists-p "Makefile")
                    (file-exists-p "icmconf"))
          (setq-local compile-command
                      (concat (if (string-equal (file-name-extension buffer-file-name) (or "cc" "cpp"))
                                 "g++ -std=c++20 " "gcc -std=c18 ")
                      "-O2 -Wall -march=native -pipe -pthread "
                      (file-name-nondirectory buffer-file-name)
                      " -o " (file-name-base buffer-file-name))))))

    (add-hook 'c-mode-common-hook #'mlk-c-edit)

    (add-to-list 'auto-mode-alist '("\\.ih\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

    (provide 'cedit)
#+end_src

#+begin_src :tangle ~/.emacs.d/init.el
  (require 'cedit)
#+end_src

** Common Lisp

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/cl-setup.el
;;;###autoload
  (defun cl-setup ()
    "require common lisp stuff"
    (interactive)
  (setq inferior-lisp-program "sbcl")
  (require 'slime)
  (slime-setup))

  (provide 'cl-setup)
#+end_src

#+begin_src emacs-lisp
  (require cl-setup)
#+end_src

** Julia

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/julia-setup.el
;;;###autoload
  (defun julia-setup ()
    "load julia"
    (interactive)
  (progn
    (require 'julia-vterm)
    (require 'julia-mode)
    (add-hook 'julia-mode-hook #'julia-vterm-mode)))

  (provide 'julia-setup)
#+end_src

#+begin_src emacs-lisp
  (require 'julia-setup)
#+end_src

** R

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/R-setup.el
;;;###autoload
  (defun R-setup ()
    "load ess-r"
    (interactive)
    (require 'ess-r-mode))

  (provide 'R-setup)
#+end_src

#+begin_src emacs-lisp
  (require 'R-setup)
#+end_src

** Python

*** Settings

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/python-setup.el
  (with-eval-after-load 'python
    (setq python-indent-offset 4)         ;?
    (setq python-indent-guess-indent-offset nil)
#+end_src

*** Bindings

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/python-setup.el
  (define-key python-mode-map (kbd "C-<return>") 'python-shell-send-statement)
  (define-key inferior-python-mode-map (kbd "C-c C-z") 'previous-window-any-frame);wip
#+end_src

*** provide

#+begin_src emacs-lisp :tangle ~/.emacs.d/lisp/python-setup.el
  )
  (provide 'python-setup)
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (require 'python-setup)
#+end_src
